name: 'Configure CMake'
description: 'Common logic for CMake configuration'

inputs:
  warnings_as_errors:
    description: 'Treat warnings as errors'
    required: false
    default: 'OFF'
  custom_flags:
    description: 'Custom CMake configuration flags'
    required: false

runs:
  using: "composite"
  steps:
    # Cache SDL3 install directory
    - name: Cache SDL3 install
      uses: actions/cache@v4
      id: cache-sdl3
      with:
        path: sdl3-install
        key: ${{ runner.os }}-sdl3-${{ hashFiles('**/CMakeLists.txt') }}

    # Install SDL3 if not cached
    - name: Install SDL3 (if not cached)
      shell: bash
      if: steps.cache-sdl3.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/libsdl-org/SDL.git -b main SDL3
        cd SDL3
        mkdir build && cd build
        if [[ "${{ matrix.cmake_generator }}" == "Ninja" ]]; then
          cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/sdl3-install
          ninja
          ninja install
        else
          cmake .. -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/sdl3-install
          cmake --build . -j$(nproc)
          cmake --install .
        fi

    # Cache CMake dependencies
    - name: Cache deps
      uses: actions/cache@v4
      id: cache-deps
      with:
        path: |
          ${{ env.BUILD_DIR }}/_deps
        key: cache-${{ matrix.cmake_generator }}-${{ matrix.os }}-${{ matrix.cxx }}-${{ env.BUILD_TYPE }}-${{ env.SFML_VERSION }}

    # Cache Ninja dependencies
    - name: Cache Ninja deps
      uses: actions/cache@v4
      if: matrix.cmake_generator == 'Ninja'
      id: cache-deps-ninja
      with:
        path: |
          ${{ env.BUILD_DIR }}/.ninja_deps
          ${{ env.BUILD_DIR }}/.ninja_log
        key: ${{ matrix.os }}-${{ matrix.cxx }}-ninja-cache-${{ hashFiles('CMakeLists.txt') }}
        restore-keys: ${{ matrix.os }}-${{ matrix.cxx }}-ninja-cache-

    # Cache MinGW toolchain
    - name: Cache MinGW
      uses: actions/cache@v4
      id: cache-mingw
      if: runner.os == 'Windows' && matrix.cxx == 'g++'
      with:
        path: gcc
        key: ${{ runner.os }}-${{ env.MINGW_CACHE_KEY }}

    # Download MinGW toolchain (if not cached)
    - name: Download toolchain (MinGW)
      uses: suisei-cn/actions-download-file@v1.4.0
      id: download-mingw-gcc
      if: runner.os == 'Windows' && matrix.cxx == 'g++' && steps.cache-mingw.outputs.cache-hit != 'true'
      with:
        url: "https://github.com/brechtsanders/winlibs_mingw/releases/download/${{ env.MINGW_VER }}"
        target: compiler/

    # Install MinGW toolchain
    - name: Install toolchain (MinGW)
      shell: bash
      if: runner.os == 'Windows' && matrix.cxx == 'g++' && steps.cache-mingw.outputs.cache-hit != 'true'
      run: |
        7z x compiler/${{ steps.download-mingw-gcc.outputs.filename }} -ogcc

    # Install GLM based on platform
    - name: Install GLM (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y libglm-dev

    - name: Install GLM (macOS)
      if: runner.os == 'macOS'
      shell: bash
      run: |
        brew update
        brew install glm

    - name: Install GLM (Windows)
      if: runner.os == 'Windows'
      shell: bash
      run: |
        git clone https://github.com/microsoft/vcpkg.git vcpkg
        ./vcpkg/bootstrap-vcpkg.bat
        ./vcpkg/vcpkg install glm
      env:
        VCPKG_ROOT: ${{ github.workspace }}/vcpkg

    # CMake configuration steps
    - name: Configure CMake (MinGW)
      shell: bash
      if: runner.os == 'Windows' && matrix.cxx == 'g++'
      run: |
        PATH="$(pwd)/gcc/mingw64/bin:${PATH}"
        CMAKE_GENERATOR=${{ matrix.cmake_generator }} cmake -S ${GITHUB_WORKSPACE} -B ${{ env.BUILD_DIR }} \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/artifacts \
          -DGITHUB_ACTIONS=${GITHUB_ACTIONS} \
          -DWARNINGS_AS_ERRORS=${{ inputs.warnings_as_errors }} \
          -DCMAKE_PREFIX_PATH="${{ github.workspace }}/vcpkg/installed/x64-windows/share" \
          ${{ inputs.custom_flags }}

    - name: Configure CMake
      shell: bash
      if: ${{ !(runner.os == 'Windows' && matrix.cxx == 'g++') }}
      run: |
        CMAKE_PREFIX_PATH="${GITHUB_WORKSPACE}/sdl3-install" \
        cmake -S ${GITHUB_WORKSPACE} -B ${{ env.BUILD_DIR }} \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/artifacts \
          -DGITHUB_ACTIONS=${GITHUB_ACTIONS} \
          -DWARNINGS_AS_ERRORS=${{ inputs.warnings_as_errors }} \
          ${{ inputs.custom_flags }}
